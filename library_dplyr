install.packages("gapminder")
install.packages("dplyr")
library(gapminder)
library(dplyr)

View(gapminder)

select(gapminder, country, year, lifeExp)

gapminder %>% select(country, year, lifeExp)

gapminder %>% select(-pop) #pop변수 제외 출력

library(gapminder)
library(dplyr)



#filter

filter(gapminder, country == "Croatia")   #크로아티아만 뽑기
gapminder %>%  filter(country == "Croatia")

gapminder %>% filter(continent == "Oceania") #오세아니아 대륙만 뽑기 
gapminder %>% filter(continent != "Africa") #아프리카가 아닌 것만 뽑기 기
gapminder %>% filter(pop >= 100000000) #인구 100000000 이상인 것만 뽑기 
gapminder %>% filter(pop >= mean(pop)) #인구가 평균 이상인 것만 뽑기
gapminder %>% filter(pop <= median(pop)) #인구가 중앙값 이하인 데이터만 뽑기

gapminder %>% filter(pop <= 100000000 & continent == "Asia") #인구가 100000000이하인 데이터만 추출
gapminder %>% filter(continent == "Asia" | continent == "Oceania") #continent가 아시아 또는 유럽인 데이터만 추출 
gapminder %>% filter(continent %in% c("Asia", "Europe", "Oceania")) #continent가 아시아 또는 유럽 또는 오세아니아인 데이터만 추출
                              # %in% 매치 연산자 사용 -> or의미를 가짐


#데이터 가공
library(gapminder)
library(dplyr)

#인구의 평균을 요약
summarise(gapminder, pop_avg = mean(pop))
gapminder %>% summarise(pop_avg = mean(pop))

#대륙별로 인구의 평균을 요약
summarise(group_by(gapminder, continent),
          pop_avg = mean(pop))
gapminder %>% group_by(continent) %>% 
  summarise(pop_avg = mean(pop))

#대륙별로 그룹짓고 같은 대륙은 나라별로 그룹 지은 후 인구의 평균을 출력
summarise(group_by(gapminder, continent, country),
          pop_avg = mean(pop))
gapminder %>% group_by(continent, country) %>% 
  summarise(pop_avg = mean(pop))


#크로아티아의 country, year, lifeExp열들만 추출한 후 기대수명의 평균 출력
gapminder %>% 
  filter(country == "Croatia") %>% 
  select(country, year, lifeExp) %>% 
  summarise(lifeExp_avg = mean(lifeExp))

#대륙을 기준으로 오름차순 정렬하여 출력
gapminder %>%  arrange(continent)

#대륙을 기준으로 오름차순 정렬하여 출력하고 같은 대륙내에서는 연도의 내림차순으로 정렬
gapminder %>%  arrange(continent, desc(year))


install.packages("readxl")
library(readxl)
exam <- read_excel("C:/work/R/ch5_data/exam.xlsx")
#파생변수 total 추가
exam %>% mutate(total = math + english + science) %>% 
  head()
#파생변수 total, mean 추가가
exam %>% mutate(total = math + english + science,
                mean = (math + english + science)/3) %>% 
  head()

#과학 점수가 60이상이면 pass 아니면 fail로 표시
exam %>% 
  mutate(test = ifelse(science >= 60, "pass", "fail")) %>% 
  head()

#total파생 변수를 추가한 후 total을 기준으로 오름차순 정렬하기
exam %>% 
  mutate(total = math + english + science) %>%
  arrange(total) %>% 
  head()

#class 별로 묶은 후 각 class의 과목별 평균, 학생 수 산출한 데이터를 class_exam으로 할당
class_exam <- exam %>%  group_by(class) %>% 
  summarise(mean_math = mean(math),
            mean_english = mean(english),
            mean_science = mean(science),
            num = n())
class_exam


#ggplot2패키지
install.packages("ggplot2")
library(ggplot2)
ex_mpg <- as.data.frame(mpg)
str(ex_mpg)

#배기량(displ)이 4이하인 자동차와 5이상인 자동차 중 어떤 자동차의
#고속도로 연비(hwy)가 평균적으로 더 높은지 알아보세요.

#4이하인 자동차 
ex_mpg_4 <- ex_mpg %>%  filter(displ <= 4)
mean(ex_mpg_4$hwy)

#5이상인 자동차
ex_mpg_5 <- ex_mpg %>%  filter(displ >= 5)
mean(ex_mpg_5$hwy)

#audi와 toyota 중 어느 제조 회사(manufacturer)의 도시연비(cty)가
#평균적으로 더 높은지 알아보세요.

ex_mpg %>% 
  filter(manufacturer=="audi" | manufacturer=="toyota") %>% 
  group_by(manufacturer) %>% 
  summarise(manu_mean = mean(cty)) %>% 
  print()

#chevrolet, ford, honda 자동차의 고속도로 연비 평균을 알아보려고
#한다. 이 회사들의 자동차를 추출한 뒤 hwy 전체 평균을 구해보세요.
ex_mpg %>% 
  filter(manufacturer %in% c("chevrolet", "ford", "honda")) %>% 
  summarise(hwy_mean = mean(hwy)) %>% 
  print()
